<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kernel | Simone Magnani</title><link>https://s41m0n.github.io/it/category/kernel/</link><atom:link href="https://s41m0n.github.io/it/category/kernel/index.xml" rel="self" type="application/rss+xml"/><description>kernel</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>it</language><copyright>© Copyright `2022` Simone Magnani</copyright><lastBuildDate>Tue, 02 Feb 2021 10:18:25 +0200</lastBuildDate><image><url>https://s41m0n.github.io/media/me.png</url><title>kernel</title><link>https://s41m0n.github.io/it/category/kernel/</link></image><item><title>DeChainy</title><link>https://s41m0n.github.io/it/project/dechainy/</link><pubDate>Tue, 02 Feb 2021 10:18:25 +0200</pubDate><guid>https://s41m0n.github.io/it/project/dechainy/</guid><description>&lt;p>Nato durante il progetto finale di tesi magistrale mentre ero un membro attivo della community Polycube, DeChainy è un altro framework open source nato per eseguire catene di funzioni di rete, utilizzando sia programmi personalizzati o predefiniti basati su eBPF/XDP.&lt;/p>
&lt;p>La differenza sostanziale con gli altri framework simili risiede nella semplicità di programmazione e utilizzo di DeChainy. Infatti, mentre alcuni servizi con il Firewall o il Mitigatore sono già inclusi nel framwork, gli utenti possono definire i loro servizi e utilizzarli nelle loro catene di servizi di monitoraggio. I servizi sono accessibili in due modi: tramite un server HTTP che predispone apposite API per l&amp;rsquo;interazione con il servizio, o direttamente tramite script in Python.&lt;/p>
&lt;p>Ci sono svariate funzionalità disponibili riguardanti anche le performance di eBPF/XDP.&lt;/p>
&lt;p>Per maggiori informazioni, visita la pagina del progetto (Tag Codice 🔝).&lt;/p></description></item><item><title>BCC</title><link>https://s41m0n.github.io/it/project/bcc/</link><pubDate>Sun, 09 Aug 2020 11:09:12 +0200</pubDate><guid>https://s41m0n.github.io/it/project/bcc/</guid><description>&lt;p>BCC è un insieme di strumenti per la creazione di programmi di tracing efficienti in kernel.&lt;/p>
&lt;p>Oltre a tutti i software ed esempi inclusi in questa raccolta, BCC è utilizzata in quanto fornisce un set di funzionalità e funzioni di support per interagire facilmente con le strutture BPF del kernel, tipo le mappe e gli array. Infatti, BCC è utilizzato per la creazione di tutti i programmi presenti in progetti come
&lt;a href="https://s41m0n.github.io/project/polycube/">Polycube&lt;/a> e
&lt;a href="https://s41m0n.github.io/project/dechainy/">DeChainy&lt;/a>.&lt;/p>
&lt;p>A Giugno 2020, la community IOVisor ha accettato una mia Pull Request, in cui proponevo nuove funzionalità per interagire con le nuove strutture dati del kernel che sono state introdotte solo recentemente. Ora è possibile dichiarare nei propri programmi eBPF scritti con BCC anche le Queue e Stack.&lt;/p>
&lt;p>Per maggiori informazion, visita la pagina del progett (Tag Codice 🔝)&lt;/p></description></item><item><title>Polycube</title><link>https://s41m0n.github.io/it/project/polycube/</link><pubDate>Sun, 09 Aug 2020 11:07:56 +0200</pubDate><guid>https://s41m0n.github.io/it/project/polycube/</guid><description>&lt;p>Nato anni fa come un progetto di ricerca, Polycube è un framework open source per la creazione di leggere ed efficienti funzioni di rete, come bridge, routers, firewalls, e altre.&lt;/p>
&lt;p>Utilizza sia eBPF che il kernel Linux, per creare funzioni di rete virtuali estremamente veloci ed ottimizzate. E' scritto in C++.&lt;/p>
&lt;p>La mia contribuzione a tale progetto consiste in:&lt;/p>
&lt;ul>
&lt;li>alleggerire l&amp;rsquo;immagine Docker (da 2.7 GB a 260MB)&lt;/li>
&lt;li>estendere il servizio Dynmon, un servizio per l&amp;rsquo;inserimento dinamico di codice eBPF e la creazione di una sonda ad-hoc con la possibilità di esportare metriche di monitoraggio&lt;/li>
&lt;li>risolvere il problema del timestamp dei pacchetti di rete&lt;/li>
&lt;li>introdurre supporto per le funzionalità più recenti del kernel&lt;/li>
&lt;li>ottimizzare ed estendere il servizio Firewall con le operazioni batch&lt;/li>
&lt;li>scrivere uno strumento di profiling&lt;/li>
&lt;li>completare documentazione e test dei vari servizi&lt;/li>
&lt;/ul>
&lt;p>Per maggiori informazioni, visita la pagina del progetto (Tag Codice 🔝)&lt;/p></description></item><item><title>Toshi</title><link>https://s41m0n.github.io/it/project/toshi/</link><pubDate>Sun, 09 Aug 2020 11:07:56 +0200</pubDate><guid>https://s41m0n.github.io/it/project/toshi/</guid><description>&lt;p>Total System Shield (Toshi) è un progetto europeo finanziato da EiT-Digital che ho supervisionato come progetto di tesi magistrale al Politecnico di Torino.&lt;/p>
&lt;p>L&amp;rsquo;obiettivo è monitorare il traffico di rete per rilevati attacchi come DDoS e Crypto mining. Quando questi eventi vengono rilevati, automaticamente il sistema inserisce regole di Firewall per prevenire e bloccare attacchi del genere.&lt;/p>
&lt;p>Il framework è composto da vari componenti che interagiscono utilizzando standard REST APIs. Il mio contributo consiste nello sviluppo di programmi eBPF in
&lt;a href="https://s41m0n.github.io/project/polycube/">Polycube&lt;/a> per l&amp;rsquo;analisi del traffico di rete, l&amp;rsquo;estrazione e la condivisione di alcune features importanti.&lt;/p>
&lt;p>eBPF è solitamente utilizzato per osservabilità di sistema e ridirezione del traffico, quindi il suo utilizzo in questo sistema è abbastanza innovativo, ed è risultato efficace, portanto buoni risultati senza alterare le performance del processo di monitoraggio.&lt;/p>
&lt;p>In collaborazione con:&lt;/p>
&lt;ul>
&lt;li>Universidad Politécnica de Madrid&lt;/li>
&lt;li>Fondazione Bruno Kessler&lt;/li>
&lt;li>Telefónica&lt;/li>
&lt;li>RedBorder&lt;/li>
&lt;/ul>
&lt;p>Per maggiori informazioni, visita la pagina del progetto (Tag Codice 🔝)&lt;/p></description></item></channel></rss>