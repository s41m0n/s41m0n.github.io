<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kernel | Simone Magnani</title><link>https://s41m0n.github.io/category/kernel/</link><atom:link href="https://s41m0n.github.io/category/kernel/index.xml" rel="self" type="application/rss+xml"/><description>kernel</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Copyright `2022` Simone Magnani</copyright><lastBuildDate>Tue, 02 Feb 2021 10:18:25 +0200</lastBuildDate><image><url>https://s41m0n.github.io/media/me.png</url><title>kernel</title><link>https://s41m0n.github.io/category/kernel/</link></image><item><title>DeChainy</title><link>https://s41m0n.github.io/project/dechainy/</link><pubDate>Tue, 02 Feb 2021 10:18:25 +0200</pubDate><guid>https://s41m0n.github.io/project/dechainy/</guid><description>&lt;p>Born alongside my latest MSc thesis period, while I was an active Polycube developer, DeChainy is another open source framework born to perform Service Programs Chain, using custom or pre-defined eBPF/XDP DataPlanes and Python ControlPlanes.&lt;/p>
&lt;p>The main difference with others frameworks alike, is that DeChainy has been developed to satisfy the final user (researcher, students, etc.) expectations, and ease its development. In fact, while some service like Firewall or DDoSMitigator is already embedded in the framework, users can customize their network monitoring probes, creating its own programs accessible in two different ways: using an HTTP server, or as if they were custom Python scripts, fully accessible and easy to interact with.&lt;/p>
&lt;p>There are plenty of features available, also concerning eBPF/XDP performance point of view.&lt;/p>
&lt;p>For more information, please visit the project website (Code tag above 🔝).&lt;/p></description></item><item><title>BCC - IOVisor</title><link>https://s41m0n.github.io/project/iovisor_bcc/</link><pubDate>Sun, 09 Aug 2020 11:09:12 +0200</pubDate><guid>https://s41m0n.github.io/project/iovisor_bcc/</guid><description>&lt;p>BCC is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples.&lt;/p>
&lt;p>Apart from all the tools and examples, BCC is also widely used because it provides a set of functionalities and helper functions to easily interact with kernel bpf structures, such as maps and arrays. In fact, BCC has been used to build all the eBPF programs used in
&lt;a href="https://s41m0n.github.io/project/polycube/">Polycube&lt;/a>.&lt;/p>
&lt;p>In June 2020, IOVisor accepted a Pull Request of mine, where I proposed new functions and helpers to interact with the newest kernel data structures that have been introduced in the latest kernel updates. Thus, now it is possible to use in-kernel Queues and Stacks within BCC.&lt;/p>
&lt;p>For more information, please visit the project website (Code tag above 🔝).&lt;/p></description></item><item><title>Polycube</title><link>https://s41m0n.github.io/project/polycube/</link><pubDate>Sun, 09 Aug 2020 11:07:56 +0200</pubDate><guid>https://s41m0n.github.io/project/polycube/</guid><description>&lt;p>Born as research project years ago, Polycube is an open source software framework that provides fast and lightweight network functions such as bridges, routers, firewalls, and others.&lt;/p>
&lt;p>It exploits both eBPF and Linux Kernel to perform Virtual Network Functions extremely fast and optimized. It is written in C++.&lt;/p>
&lt;p>My contribution consists in:&lt;/p>
&lt;ul>
&lt;li>lighten the Docker image built (from 2.7 GB to 260 MB)&lt;/li>
&lt;li>extending Dynamic Monitor (Dynmon), a service to dynamically inject user eBPF code, monitor the attached network interface and export metrics&lt;/li>
&lt;li>addressing packet timestamp problem&lt;/li>
&lt;li>introducing newest kernel structures support&lt;/li>
&lt;li>optimize and extend the Firewall service for batch operations&lt;/li>
&lt;li>writing a flexible Profiler framework&lt;/li>
&lt;li>completing documentation and tests&lt;/li>
&lt;/ul>
&lt;p>For more information, please visit the project website (Code tag above 🔝).&lt;/p></description></item><item><title>Toshi</title><link>https://s41m0n.github.io/project/toshi/</link><pubDate>Sun, 09 Aug 2020 11:07:56 +0200</pubDate><guid>https://s41m0n.github.io/project/toshi/</guid><description>&lt;p>Total System Shield (Toshi) is an european project funded by EiT-Digital that I carried as my MSc thesis project at Polytechnic of Turin.&lt;/p>
&lt;p>The aim is to monitor network traffic in order to detect attacks like DDoS and Crypto mining. When such attacks are detected, it automatically inserts rules in the Firewall to both prevent and stop them.&lt;/p>
&lt;p>The framework is composed by many components which interact using standardized Rest APIs. My concern, was to develop an eBPF program to be injected and used in
&lt;a href="https://s41m0n.github.io/project/polycube/">Polycube&lt;/a> in order to analyze incoming and outgoing packets, extracting some features among them and export these values to the other components.&lt;/p>
&lt;p>eBPF has always been used for statistics and traffic redirection, so this usage is quiet uncommon, but it turned out to be an innovative approach which led to good results without altering networking perfomance so much.&lt;/p>
&lt;p>In collaboration with:&lt;/p>
&lt;ul>
&lt;li>Universidad Politécnica de Madrid&lt;/li>
&lt;li>Fondazione Bruno Kessler&lt;/li>
&lt;li>Telefónica&lt;/li>
&lt;li>RedBorder&lt;/li>
&lt;/ul>
&lt;p>For more information, please visit the project website (Code tag above 🔝).&lt;/p></description></item></channel></rss>